Design:
-------

A web based version of the design may be viewed at:
http://student.computing.dcu.ie/~duffyi3/ChatServer/

![Data Flow Diagram](http://student.computing.dcu.ie/~duffyi3/ChatServer/DataFlow.png)

Our chat server is made up four different classes:

 - MessageServer
 - Connection
 - Consumer
 - Producer

Consumer, Producer and MessageServer are all extensions of the thread class.
This allows them to run in parallel.

### MessageServer

MessageServer is responsible for receiving and sending all of the clients
messages.

Messages get inserted into its buffer from the producer via the
```addMesage(String message)``` method.

Messages are served to the consumers buffers when messages are available.

### Private attributes
    ArrayList< String > buffer
Message buffer. 

    ArrayList< Connection > connections
Connection list. 

    final int MAXCONNECTIONS
Maximum about of connections. 

#### Public Member Functions
    synchronized void addConnection (Connection connection)
Adds a new connection to the connections list. 

    synchronized void deleteConnection (Connection connection)
Deletes a connection from the connections list. 
    
    synchronized void addMessage (String message)
Adds a message to the buffer. 

    synchronized String getNextMessage ()  throws InterruptedException 
Waits until the buffer is not empty and then returns the first message. 

    synchronized boolean isFull ()
Reports whether or not the server is at maximum connections. 

    void run ()
Send messages from the buffer to clients. 

#### Private Member Functions
    synchronized void sendMessageToAll (String message)
Passes the message onto all the connections. 

### Connection

Connection is a structure that holds all information that is related to a
connection this includes the socket, producer, consumer and a nickname.

#### Public Attributes
    Socket socket = null
Socket to the clients connection. 

    Producer producer = null
Producer to listen for messages from the client. 

    Consumer consumer = null
Consumer to send messages to the client. 

    String nickname = null
The clients nickname. 

#### Public Member Functions
    void close ()
Closes all the streams involved in the connection. 

### Producer

Receives messages from the Connection and sends them to MessageServer.

#### Private Attributes
    MessageServer messageServer
Reference to MessageServer. 

    Connection connection
Reference to Connection. 

    BufferedReader instream
Input stream. 

#### Public Member Functions
    void run ()
Listen for messages. 

    void interrupt ()
Overrides the default thread interrupt to:

 - Remove the connection from the messageServer list of connections.
 - Close all the streams involved with the connection.
 - Interrupt the consumer for the connection.

    void close ()
Closes the instream. 

### Consumer 

Receives messages from MessageServer and stores them in a buffer which is
eventually sent to the client.

#### Private Attributes
    ArrayList< String > buffer
Buffer of messages. 

    PrintWriter outstream
Output stream. 

#### Public Member Functions
    synchronized void addMessage (String message)
Adds a message to the buffer. 

    synchronized String getNextMessage ()  throws InterruptedException 
Waits until the buffer is not empty and then returns the first message. 

    void sendMessage (String message)
Sends a message to the client. 

    void run ()
Send messages from the buffer to clients. 

    void close ()
Closes the outstream.
